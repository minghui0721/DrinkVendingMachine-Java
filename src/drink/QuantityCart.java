
package drink;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;


public class QuantityCart extends javax.swing.JFrame {

    private String drinkId;
    private String drinkName;
    private double unitPrice;
    private int availableQuantity;
    private Drink drink;
    private Map<String, Drink> drinksMap;
    private ViewCart parentFrame;


 
public QuantityCart(Drink drink, Map<String, Drink> drinksMap, ViewCart parentFrame) {
    initComponents();
    setSize(600, 450);
    setLocation(650, 300);
    this.drinkId = drink.getDrinkID();
    this.drinkName = drink.getDrinkName();
    this.unitPrice = drink.getTotalPrice() / drink.getTotalQuantity(); // Calculate the unit price
    this.availableQuantity = drink.getTotalQuantity();
    this.drink = drink;
    this.drinksMap = drinksMap;
    this.parentFrame = parentFrame;
    
    // Set the available quantity in the text field
    jTextField1.setText(String.valueOf(availableQuantity));
    
    // Set drink information using the setDrinkInfo method
    setDrinkInfo(drinkId, drinkName, unitPrice, availableQuantity);
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 55)); // NOI18N
        jLabel4.setText("Edit Quantity");

        jTextField1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(92, 90, 219));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setToolTipText("Edit to the quantity you want to purchase.");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(92, 90, 219));
        jButton1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("UPDATE");
        // Set padding and border for jButton1
        jButton1.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        // Remove the border and focused border
        jButton1.setBorder(null);
        jButton1.setFocusPainted(false);
        
       // Add action listener for jButton1
       jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                updateCart(); // Call the method to update the cart
            }
        });


        
        
        
        // Add hover effect to jButton1
        jButton1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                jButton1.setBackground(new Color(0x1D1D36));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jButton1.setBackground(new Color(92, 90, 219));
            }
        });
        
        

        jButton2.setBackground(new java.awt.Color(92, 90, 219));
        jButton2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("CLOSE");
        // Set padding and border for jButton2
        jButton2.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        // Remove the border and focused border
        jButton2.setBorder(null);
        jButton2.setFocusPainted(false);
        
        // Add hover effect to jButton2
        jButton2.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                jButton2.setBackground(new Color(0x1D1D36));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jButton2.setBackground(new Color(92, 90, 219));
            }
        });
        
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispose();
            }
        });
        
        

          javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150,150)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(169, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel4)
                .addGap(48, 48, 48)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(174, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
    
   private int fetchTotalQuantity(String drinkID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("data/drinks.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length >= 4 && parts[0].equals(drinkID)) {
                    return Integer.parseInt(parts[3]); // Assuming the total quantity is at index 3
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return -1; // Return -1 if drinkID is not found or there's an error
    }

   private void updateCart() {
    String quantityString = jTextField1.getText();

    if (!quantityString.isEmpty()) {
        try {
            int quantity = Integer.parseInt(quantityString);
            int totalQuantity = fetchTotalQuantity(drinkId);
            
            
            if (quantity == availableQuantity) {
                JOptionPane.showMessageDialog(this, "No changes have been made.", "Information", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                return;
            }

            if (quantity > 0 && quantity <= totalQuantity) {
                // Calculate total
                double total = quantity * unitPrice;

                // Update cart.txt
                boolean updateSuccess = updateCartFile(drinkId, quantity, total);

                if (updateSuccess) {
                    String message = "Cart updated:\n"
                            + "Drink: " + drinkName + "\n"
                            + "New Quantity: " + quantity + "\n"
                            + "New Total: RM" + total;
                    JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                    // Close ViewCart frame
                    if (parentFrame != null && parentFrame instanceof ViewCart) {
                        ViewCart viewCart = (ViewCart) parentFrame;
                        viewCart.dispose(); // Close ViewCart frame
                    }
                    ViewCart viewCart = new ViewCart();
                    viewCart.setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid quantity within the available range (up to " + totalQuantity + " units).", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid integer quantity.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else{
        JOptionPane.showMessageDialog(this, "Please do not leave the field blank !", "Error", JOptionPane.ERROR_MESSAGE);
    }
}



    private boolean updateCartFile(String drinkId, int newQuantity, double newTotal) {
        String tempFile = "data/cart_temp.txt";
        String cartFile = "data/cart.txt";
        boolean updated = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(cartFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length >= 3 && parts[0].equals(drinkId)) {
                    // Skip the line to update
                    continue;
                }
                writer.write(line);
                writer.newLine();
            }

            // Append the updated record to the temp file
            String newCartLine = drinkId + "|" + drinkName + "|" + newQuantity + "|" + newTotal;
            writer.write(newCartLine);
            writer.newLine();

            updated = true;
        } catch (IOException e) {
            e.printStackTrace();
        }

         // Replace the original cart file with the updated temp file
        if (updated) {
        File originalFile = new File(cartFile);
        File tempFileObj = new File(tempFile);

        // Delete the original cart file
        if (originalFile.delete()) {
            // Rename the temporary file to the original file's name
            if (tempFileObj.renameTo(originalFile)) {
                return true;
            } else {
                System.out.println("Failed to update cart file.");
            }
        } else {
            System.out.println("Failed to delete original cart file.");
        }
    }

        return false;
    }

   
    
  // Method to set the drink information retrieved from the drinks.txt file
    public void setDrinkInfo(String drinkId, String drinkName, double unitPrice, int availableQuantity) {
        this.drinkId = drinkId;
        this.drinkName = drinkName;
        this.unitPrice = unitPrice;
        this.availableQuantity = availableQuantity;
        setTitle("Vending Machine System - " + drinkName);
    }
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }
    
   


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
