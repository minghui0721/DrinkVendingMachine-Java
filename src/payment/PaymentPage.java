/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package payment;

import drink.ViewCart;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author mingh
 */
public class PaymentPage extends javax.swing.JFrame {

    /**
     * Creates new form Payment
     */
    public PaymentPage() {
        initComponents();
        
        setSize(750, 600);
        setLocation(600, 250);
        setTitle("Vending Machine System - Payment");
        
        double total = calculateTotalFromCartFile();
        jTextField4.setEditable(false); // Set the text field as non-editable
        jTextField4.setText(String.format("RM: %.2f", total)); // Display the total
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        getContentPane().setBackground(Color.decode("#03045e")); // Set the background color
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 58)); // NOI18N
        jLabel7.setForeground(Color.WHITE);
        jLabel7.setText("Payment");

        jTextField4.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(0xff563f));
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField4.setMargin(new Insets(5, 20, 5, 10)); // Adjust the insets values as needed

        
        // Create the redeem button
        RedeemButton redeemButton = new RedeemButton();
        // Add an ActionListener to handle the redeem button click
        redeemButton.addActionListener(new ActionListener() {
        private boolean redeemed = false; // To track if redemption has already been done
        @Override
        public void actionPerformed(ActionEvent e) {
            
             if (redeemed) {
                JOptionPane.showMessageDialog(null, "Discount already applied.");
                return;
            }
             
            // Check if jTextField7 contains exactly 6 digits
            String inputCode = jTextField7.getText().trim();
            if (inputCode.length() != 6 || !inputCode.matches("\\d{6}")) {
                JOptionPane.showMessageDialog(null, "Please enter a valid 6-digit code.");
                return;
            }

            // Read data from 'data/discount.txt'
            try (BufferedReader reader = new BufferedReader(new FileReader("data/discount.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 2 && parts[0].equals(inputCode)) {
                        // Found a matching promo code
                        double percentage = Double.parseDouble(parts[1]);
                     

                        // Calculate and update the total
                        double total = parseTotalFromTextField(jTextField4.getText());
                      
                        
                        double discountedTotal = total * (100 - percentage) / 100;
                        jTextField4.setText(String.format("RM: %.2f", discountedTotal));
                          redeemed = true;
                        jTextField7.setEditable(false);
                    
                        return; // Exit the loop after finding a match
                    }
                }

                // No matching promo code found
                JOptionPane.showMessageDialog(null, "Promo code not found.");

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while reading discount data.", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    });

   

        jButton7.setBackground(new java.awt.Color(92, 90, 219));
        jButton7.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Pay");
        jButton7.setBorderPainted(false); // Remove the border
        jButton7.setFocusPainted(false); // Remove focus border
      
        jButton7.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                jButton7.setBackground(new Color(0x0077b6));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jButton7.setBackground(new Color(92, 90, 219));
            }
        });
        
        jButton7.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String amountInsertedText = jTextField5.getText();

                if (amountInsertedText.isEmpty() || amountInsertedText.equals("Please insert payable amount")) {
                    JOptionPane.showMessageDialog(null, "Please insert money first !");
                    return;
                }

                try {
                    double totalPayable = Double.parseDouble(jTextField4.getText().substring(4));
                    double totalAmount = totalPayable;
                    double amountInserted = Double.parseDouble(amountInsertedText);
                    
                    if (amountInserted < 0) {
                        JOptionPane.showMessageDialog(null, "Please enter a valid positive amount !");
                        return;
                    }

                    double change = totalPayable - amountInserted;

                    String message;

                    if (change == 0) {
                        message = "Successful payment !";
                        insertOrderRecord(totalAmount);

                        JOptionPane.showMessageDialog(null, message + "\nClick 'OK' to view receipt.", "Payment Successful", JOptionPane.INFORMATION_MESSAGE);

                        // Read the percentage from the jTextField7
                        String percentageStr = jTextField7.getText().trim();
                        double percentage = Double.parseDouble(percentageStr);

                        // Save the applied discount to 'data/discountApplied.txt'
                        String orderID = generateOrderID(); // You need to implement this function to generate a unique order ID
                        String discountInfo = orderID + "|" + percentage;

                        try (PrintWriter writer = new PrintWriter(new FileWriter("data/discountApplied.txt", true))) {
                            writer.println(discountInfo);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(null, "An error occurred while saving discount applied data.", "Error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                        
                        // Close the current frame
                        dispose();

                        // Open the 'ReceiptGenerate' frame
                        ReceiptGenerate receiptGenerate = new ReceiptGenerate();
                        receiptGenerate.setVisible(true);
                    } else if (change < 0) {
                        message = "Please collect your RM " + String.format("%.2f", Math.abs(change)) + " change !";
                        insertOrderRecord(totalAmount);

                        JOptionPane.showMessageDialog(null, message + "\nClick 'OK' to view receipt.", "Change to Collect", JOptionPane.INFORMATION_MESSAGE);

                        // Close the current frame
                        dispose();

                        // Open the 'ReceiptGenerate' frame
                        ReceiptGenerate receiptGenerate = new ReceiptGenerate();
                        receiptGenerate.setVisible(true);
                    }

                     else {
                       message = "You still need to pay RM " + String.format("%.2f", change) + " more !";
                        jTextField5.setText("");
                    }

                    if (change >= 0) {
                        jTextField4.setText(String.format("RM: %.2f", change));
                    }

                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid positive integer amount !");
                }
            }
        });




        jButton8.setBackground(new java.awt.Color(92, 90, 219));
        jButton8.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Back");
        jButton8.setToolTipText("");
        jButton8.setBorderPainted(false); // Remove the border
        jButton8.setFocusPainted(false); // Remove focus border
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        
        jButton8.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                jButton8.setBackground(new Color(0x0077b6));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jButton8.setBackground(new Color(92, 90, 219));
            }
        });
        
        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 25)); // NOI18N
        jLabel4.setForeground(Color.WHITE);
        jLabel4.setText("Promo Codes:");
        
        Font hintFont = new Font("Arial", Font.ITALIC, 15);
        Color hintColor = Color.GRAY; // Gray color
        Border paddingBorder = BorderFactory.createEmptyBorder(5, 20, 5, 10); // Adjust padding values as needed
        
        jTextField7.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        // Add the redeem button to jTextField7
        jTextField7.setLayout(new BorderLayout()); // Use BorderLayout to align components
        jTextField7.add(redeemButton, BorderLayout.EAST); // Add the button to the right side
        jTextField7.setForeground(new java.awt.Color(0x1D1D36));
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField7.setBorder(paddingBorder); // Apply the padding border
        jTextField7.setMargin(new Insets(5, 20, 5, 10)); // Adjust the insets values as needed
        jTextField7.setToolTipText("Enter promo code here:");
        jTextField7.setText("Please enter promo codes");
        jTextField7.setFont(hintFont);
        jTextField7.setPreferredSize(new Dimension(jTextField7.getPreferredSize().width, 50)); // Set preferred height

        jTextField5.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(0x1D1D36));
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setText("Please insert payable amount");
        jTextField5.setToolTipText("Please insert payable amount");  
        jTextField5.setBorder(paddingBorder); // Apply the padding border
        jTextField5.setFont(hintFont);
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField5.setMargin(new Insets(5, 20, 5, 10)); // Adjust the insets values as needed
        jTextField5.setPreferredSize(new Dimension(jTextField5.getPreferredSize().width, 50)); // Set preferred height

        
        jTextField5.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (jTextField5.getText().equals("Please insert payable amount")) {
                    jTextField5.setText("");
                    jTextField5.setForeground(new java.awt.Color(0, 0, 0));
                }
                jTextField5.setFont(new Font("Arial", Font.PLAIN, 30));
                jTextField5.setBorder(paddingBorder); // Apply padding border
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (jTextField5.getText().isEmpty()) {
                    jTextField5.setForeground(new java.awt.Color(169, 169, 169));
                    jTextField5.setText("Please insert payable amount");
                    jTextField5.setBorder(null); // Remove border
                     jTextField5.setBorder(paddingBorder); // Apply padding border
                }
                jTextField5.setFont(hintFont);
            }
        });

        jTextField7.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (jTextField7.getText().equals("Please enter promo codes")) {
                    jTextField7.setText("");
                    jTextField7.setForeground(new java.awt.Color(0, 0, 0));
                }
                jTextField7.setFont(new Font("Arial", Font.PLAIN, 30));
                jTextField7.setBorder(paddingBorder); // Apply padding border
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (jTextField7.getText().isEmpty()) {
                    jTextField7.setForeground(new java.awt.Color(169, 169, 169));
                    jTextField7.setText("Please enter promo codes");
                    jTextField7.setBorder(null); // Remove border
                     jTextField7.setBorder(paddingBorder); // Apply padding border
                }
                jTextField7.setFont(hintFont);
            }
        });

    
        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 25)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0xff563f));
        jLabel1.setText("Total Payable:");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 25)); // NOI18N
        jLabel2.setForeground(Color.WHITE);
        jLabel2.setText("Insert Amount:");



        // Layout setup
        // Layout setup
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)) // Add Promo Codes label
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))) // Add Promo Codes JTextField
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(570, Short.MAX_VALUE))
        );

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)) // Add Promo Codes label
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );



        pack();
    }// </editor-fold>                        

    
    // Parse the total value from the jTextField4 text
private double parseTotalFromTextField(String textFieldText) {
    String totalStr = textFieldText.replace("RM:", "").trim();
    return Double.parseDouble(totalStr);
}

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        dispose();
         // Create a new instance of CustomerIndex
           // Open a new instance of the ViewCart frame
                ViewCart viewCart = new ViewCart();
                viewCart.setVisible(true);
    }       
    
   private void insertOrderRecord(double total) {
    try {
        String orderID = generateOrderID(); // Generate the orderID
        LocalDateTime currentTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDate = currentTime.format(formatter);

        String totalFormatted = String.format("%.2f", total);

        Path tempFilePath = Paths.get("data/temporary_cart.txt");
        List<String> lines = Files.readAllLines(tempFilePath);

        StringBuilder drinkRecords = new StringBuilder();
        for (int i = 0; i < lines.size(); i++) {
            String[] parts = lines.get(i).split("\\|");
            String drinkID = parts[0];
            String drinkName = parts[1];
            int quantity = Integer.parseInt(parts[2]);
            double price = Double.parseDouble(parts[3]);

            String drinkRecord = String.format("[%s,%s,%d,%.2f]", drinkID, drinkName, quantity, price);
            drinkRecords.append(drinkRecord);

            if (i < lines.size() - 1) {
                drinkRecords.append("/");
            }
        }

        String record = orderID + "|" + formattedDate + "|" + totalFormatted + "|" + "[" + drinkRecords.toString() + "]";

        BufferedWriter writer = new BufferedWriter(new FileWriter("data/orders.txt", true));
        writer.write(record);
        writer.newLine();
        writer.close();

    } catch (IOException ex) {
        ex.printStackTrace();
    }
}


    // Method to generate the orderID
    private String generateOrderID() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("data/orders.txt"));
            int lineCount = 0;

            while (reader.readLine() != null) {
                lineCount++;
            }

            reader.close();

            int nextOrderNumber = lineCount + 1;
            String orderID = String.format("OD%03d", nextOrderNumber); // Format as OD001, OD002, etc.
            return orderID;
        } catch (IOException ex) {
            ex.printStackTrace();
            return null; // Handle error appropriately
        }
    }


    
    
    private double calculateTotalFromCartFile() {
        double total = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader("data/cart.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length >= 4) {
                    try {
                        double price = Double.parseDouble(parts[3]);
                        total += price;
                    } catch (NumberFormatException e) {
                        // Handle parsing error, e.g., print or log the error
                        e.printStackTrace();
                    }
                }
            }
        } catch (IOException e) {
            // Handle file reading error, e.g., print or log the error
            e.printStackTrace();
        }
        return total;
    }
    
    public class RedeemButton extends JButton {
        public RedeemButton() {
            super("Redeem");
            setFocusPainted(false);
        }
    }


    // Variables declaration - do not modify                     

    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
     private javax.swing.JTextField jTextField7;
    // End of variables declaration                   
}
